enable_language(ASM)

if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows" AND "${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
    set(CONTEXT_PLATFORM "windows")
    set(CONTEXT_ASM_EXT "_x86_64_ms_pe_masm.asm")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND "${CMAKE_SIZEOF_VOID_P}" STREQUAL "8" AND "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "arm64")
    set(CONTEXT_PLATFORM "posix")
    set(CONTEXT_ASM_EXT "_arm64_aapcs_elf_gas.S")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND "${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
    set(CONTEXT_PLATFORM "posix")
    set(CONTEXT_ASM_EXT "_x86_64_sysv_elf_gas.S")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Android" AND "${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
    set(CONTEXT_PLATFORM "posix")
    set(CONTEXT_ASM_EXT "_arm64_aapcs_elf_gas.S")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin" AND "${CMAKE_SIZEOF_VOID_P}" STREQUAL "8" AND "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "arm64")
    set(CONTEXT_PLATFORM "posix")
    set(CONTEXT_ASM_EXT "_arm64_aapcs_macho_gas.S")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin" AND "${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
    set(CONTEXT_PLATFORM "posix")
    set(CONTEXT_ASM_EXT "_x86_64_sysv_macho_gas.S")
else()
    message(FATAL_ERROR "Platform not supported.")
endif()

set(BOOST_VERSION "1_70_0")
set(BOOST_DIR "${CMAKE_SOURCE_DIR}/3rdparty/boost_${BOOST_VERSION}")
add_definitions("-DBOOST_USE_VALGRIND=1")
#message("BOOST_DIR: ${BOOST_DIR}")
#message("ASMEXT: ${CONTEXT_ASM_EXT}")

file (GLOB BOOST_SYSTEM_HEADERS "${BOOST_DIR}/boost/system/*.hpp" "${BOOST_DIR}/boost/system/detail/*.hpp")
file (GLOB BOOST_SYSTEM_SOURCES "${BOOST_DIR}/libs/system/src/*.cpp")
add_library(boost_system ${BOOST_SYSTEM_HEADERS} ${BOOST_SYSTEM_SOURCES})
target_include_directories(boost_system PUBLIC "${BOOST_DIR}")

add_library(boost_asio INTERFACE)
target_include_directories(boost_asio INTERFACE "${BOOST_DIR}")
target_link_libraries(boost_asio INTERFACE boost_system)

file (GLOB BOOST_CONTEXT_ASM_SOURCES "${BOOST_DIR}/libs/context/src/asm/*${CONTEXT_ASM_EXT}")
file (GLOB BOOST_CONTEXT_SOURCES "${BOOST_DIR}/libs/context/src/execution_context.cpp" "${BOOST_DIR}/libs/context/src/${CONTEXT_PLATFORM}/*.cpp")
add_library(boost_context ${BOOST_CONTEXT_SOURCES} ${BOOST_CONTEXT_ASM_SOURCES})
target_link_libraries(boost_context PUBLIC boost_system)

add_library(boost_coroutine2 INTERFACE)
target_include_directories(boost_coroutine2 INTERFACE "${BOOST_DIR}")
target_link_libraries(boost_coroutine2 INTERFACE boost_context)
