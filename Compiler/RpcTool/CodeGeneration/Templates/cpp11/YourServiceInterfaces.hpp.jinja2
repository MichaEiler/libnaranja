#pragma once

// This code is generated. It is not recommended to manually manipulate it!
// Generator: {{ generatorName }}, {{ generatorVersion }}
// {{ generationDate }}

#include <cstdint>
#include <functional>
#include <set>
#include <string>
#include <unordered_map>
#include <vector>

{% for include in document.includes -%}
#include "{{ include.name }}Types.hpp"
{% endfor %}
{%- if document.hasTypes() -%}
#include "{{ document.name}}Types.hpp"
{% endif %}

namespace Rpc2
{
    namespace {{ projectName }}
    {
        namespace {{ document.name }}
        {
            {% for service in document.services -%}
            class I{{ service.name }}Service
            {
            public:
                virtual ~I{{ service.name }}Service() = default;
                {% for function in service.functions %}
                virtual {{ include("detail/Type.jinja2", type = function.returnType) }} {{ function.name }}({{ include("detail/Args.jinja2", args = function.args) }}) = 0;
                {%- endfor %}
                {% for callback in service.callbacks %}
                virtual void Set{{ callback.name }}Callback(const std::function<void({{ include("detail/Args.jinja2", args = callback.args) }})>& callback) = 0;
                {%- endfor %}
            };
            {% endfor %}
        }
    }
}